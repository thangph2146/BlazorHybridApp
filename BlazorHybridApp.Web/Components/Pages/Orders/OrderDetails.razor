@page "/orders/{Id:int}"
@using BlazorHybridApp.Domain.Entities
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Order Details</PageTitle>

<h1>Order Details</h1>

<div class="mb-3">
    <button class="btn btn-secondary" @onclick="GoBack">Back to Orders</button>
</div>

@if (order == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card mb-4">
        <div class="card-header">
            <h4>Order #@order.Id</h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h5>Order Information</h5>
                    <dl class="row">
                        <dt class="col-sm-4">Order Date:</dt>
                        <dd class="col-sm-8">@order.OrderDate.ToShortDateString()</dd>

                        <dt class="col-sm-4">Status:</dt>
                        <dd class="col-sm-8">@order.Status</dd>

                        <dt class="col-sm-4">Total Amount:</dt>
                        <dd class="col-sm-8">@order.TotalAmount.ToString("C")</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <h5>Customer Information</h5>
                    @if (order.User != null)
                    {
                        <dl class="row">
                            <dt class="col-sm-4">Name:</dt>
                            <dd class="col-sm-8">@order.User.FullName</dd>

                            <dt class="col-sm-4">Email:</dt>
                            <dd class="col-sm-8">@order.User.Email</dd>

                            <dt class="col-sm-4">Created:</dt>
                            <dd class="col-sm-8">@order.User.CreatedAt.ToShortDateString()</dd>
                        </dl>
                    }
                    else
                    {
                        <p>User information not available</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <h4>Order Items</h4>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Item</th>
                    <th>Product</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Subtotal</th>
                </tr>
            </thead>
            <tbody>
                @if (order.OrderItems != null && order.OrderItems.Any())
                {
                    @foreach (var item in order.OrderItems)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td>@(item.Product?.Name ?? $"Product #{item.ProductId}")</td>
                            <td>@item.UnitPrice.ToString("C")</td>
                            <td>@item.Quantity</td>
                            <td>@((item.UnitPrice * item.Quantity).ToString("C"))</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No items found</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <th colspan="4" class="text-end">Total:</th>
                    <th>@order.TotalAmount.ToString("C")</th>
                </tr>
            </tfoot>
        </table>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Update Order Status</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <select class="form-select" id="status" @bind="newStatus">
                            <option value="Pending">Pending</option>
                            <option value="Processing">Processing</option>
                            <option value="Shipped">Shipped</option>
                            <option value="Delivered">Delivered</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <button class="btn btn-primary" @onclick="UpdateOrderStatus">Update Status</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Order? order;
    private string? newStatus;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderDetails();
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            order = await Http.GetFromJsonAsync<Order>($"api/orders/{Id}/details");
            if (order != null)
            {
                newStatus = order.Status;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order details: {ex.Message}");
        }
    }

    private async Task UpdateOrderStatus()
    {
        if (order == null || string.IsNullOrEmpty(newStatus))
            return;
            
        try
        {
            var statusRequest = new { Status = newStatus };
            await Http.PatchAsJsonAsync($"api/orders/{Id}/status", statusRequest);
            await LoadOrderDetails();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating order status: {ex.Message}");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/orders");
    }
} 