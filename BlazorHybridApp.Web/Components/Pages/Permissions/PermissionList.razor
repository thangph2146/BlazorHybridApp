@page "/permissions"
@using BlazorHybridApp.Domain.Entities
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Quản lý phân quyền</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Quản lý phân quyền</h1>
    <div class="btn-group">
        <button class="btn btn-outline-primary" @onclick="() => NavigateToUserPermissions()">
            <i class="bi bi-people"></i> Phân quyền người dùng
        </button>
        <button class="btn btn-primary" @onclick="() => ShowPermissionDialog(null)">
            <i class="bi bi-plus-circle"></i> Thêm quyền mới
        </button>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Tìm kiếm quyền..." @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
            <button class="btn btn-outline-secondary" type="button" @onclick="Search">
                <i class="bi bi-search"></i>
            </button>
        </div>
    </div>
    <div class="col-md-3">
        <select class="form-select" @bind="selectedType">
            <option value="">Tất cả loại quyền</option>
            <option value="View">Xem</option>
            <option value="Create">Tạo mới</option>
            <option value="Edit">Chỉnh sửa</option>
            <option value="Delete">Xóa</option>
            <option value="Admin">Quản trị</option>
        </select>
    </div>
    <div class="col-md-3">
        <select class="form-select" @bind="statusFilter">
            <option value="">Tất cả trạng thái</option>
            <option value="true">Hoạt động</option>
            <option value="false">Không hoạt động</option>
        </select>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
    </div>
}

@if (isLoading)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Đang tải...</span>
        </div>
        <span class="ms-2">Đang tải dữ liệu...</span>
    </div>
}
else if (permissions == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Đang tải...</span>
        </div>
    </div>
}
else if (!permissions.Any())
{
    <div class="alert alert-info">
        <i class="bi bi-info-circle"></i> Không tìm thấy quyền nào.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Mã</th>
                    <th>Tên</th>
                    <th>Mô tả</th>
                    <th>Loại quyền</th>
                    <th>Trạng thái</th>
                    <th>Tùy chọn</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var permission in filteredPermissions)
                {
                    <tr>
                        <td>@permission.Code</td>
                        <td>@permission.Name</td>
                        <td>@(string.IsNullOrEmpty(permission.Description) ? "-" : permission.Description)</td>
                        <td>
                            <span class="badge rounded-pill bg-primary">
                                Quyền hệ thống
                            </span>
                        </td>
                        <td>
                            @if (permission.IsActive)
                            {
                                <span class="badge bg-success">Hoạt động</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Không hoạt động</span>
                            }
                        </td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-primary" @onclick="() => ShowPermissionDialog(permission)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(permission)">
                                    <i class="bi bi-trash"></i>
                                </button>
                                <button class="btn btn-sm btn-info" @onclick="() => ViewPermissionUsers(permission.Id)">
                                    <i class="bi bi-people"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
    <div class="d-flex justify-content-between align-items-center">
        <div>
            Hiển thị @filteredPermissions.Count() / @permissions.Count() quyền
        </div>
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">Trước</button>
                </li>
                
                @for (int i = 1; i <= totalPages; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                    </li>
                }
                
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">Sau</button>
                </li>
            </ul>
        </nav>
    </div>
}

@if (showDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(selectedPermission == null ? "Thêm quyền mới" : "Chỉnh sửa quyền")</h5>
                    <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="permissionModel" OnValidSubmit="SavePermission">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="mb-3">
                            <label for="name" class="form-label">Tên quyền</label>
                            <InputText id="name" class="form-control" @bind-Value="permissionModel.Name" />
                            <ValidationMessage For="@(() => permissionModel.Name)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="code" class="form-label">Mã quyền</label>
                            <InputText id="code" class="form-control" @bind-Value="permissionModel.Code" />
                            <ValidationMessage For="@(() => permissionModel.Code)" />
                            <div class="form-text">Mã quyền nên là duy nhất và có định dạng: Entity:Action (Ví dụ: Users:View)</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="description" class="form-label">Mô tả</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="permissionModel.Description" rows="3" />
                            <ValidationMessage For="@(() => permissionModel.Description)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="type" class="form-label">Loại quyền</label>
                            <InputSelect id="type" class="form-select" @bind-Value="permissionModel.PermissionType">
                                <option value="@PermissionType.View">Xem</option>
                                <option value="@PermissionType.Create">Tạo mới</option>
                                <option value="@PermissionType.Edit">Chỉnh sửa</option>
                                <option value="@PermissionType.Delete">Xóa</option>
                                <option value="@PermissionType.Admin">Quản trị</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => permissionModel.PermissionType)" />
                        </div>
                        
                        <div class="mb-3 form-check">
                            <InputCheckbox id="isActive" class="form-check-input" @bind-Value="permissionModel.IsActive" />
                            <label for="isActive" class="form-check-label">Hoạt động</label>
                            <ValidationMessage For="@(() => permissionModel.IsActive)" />
                        </div>
                        
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Hủy</button>
                            <button type="submit" class="btn btn-primary">
                                @(selectedPermission == null ? "Thêm" : "Lưu thay đổi")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showDeleteConfirm)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận xóa</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteConfirm"></button>
                </div>
                <div class="modal-body">
                    <p>Bạn có chắc chắn muốn xóa quyền <strong>@selectedPermission?.Name</strong>?</p>
                    
                    @if (permissionUsers != null && permissionUsers.Any())
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i> Quyền này hiện đang được gán cho @permissionUsers.Count người dùng. Xóa quyền này sẽ xóa tất cả các phân quyền liên quan.
                        </div>
                    }
                    
                    <p class="text-danger">Hành động này không thể hoàn tác.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirm">Hủy</button>
                    <button type="button" class="btn btn-danger" @onclick="DeletePermission">Xác nhận xóa</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showUsersDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Người dùng có quyền: @selectedPermission?.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseUsersDialog"></button>
                </div>
                <div class="modal-body">
                    @if (permissionUsers == null)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                        </div>
                    }
                    else if (!permissionUsers.Any())
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> Chưa có người dùng nào được gán quyền này.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Họ tên</th>
                                        <th>Email</th>
                                        <th>Phòng ban</th>
                                        <th>Loại quyền</th>
                                        <th>Tùy chọn</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var userPerm in permissionUsers)
                                    {
                                        <tr>
                                            <td>@userPerm.User.FullName</td>
                                            <td>@userPerm.User.Email</td>
                                            <td>
                                                @if (userPerm.ScopeDepartmentId.HasValue)
                                                {
                                                    var dept = GetDepartmentName(userPerm.ScopeDepartmentId.Value);
                                                    <span class="badge bg-info">@dept</span>
                                                }
                                                else if (userPerm.IsSelfOnly)
                                                {
                                                    <span class="badge bg-warning">Chỉ bản thân</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">Toàn bộ</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge rounded-pill bg-@GetTypeColor(userPerm.Type)">
                                                    @GetTypeDisplayName(userPerm.Type)
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-danger" @onclick="() => RemoveUserPermission(userPerm)">
                                                    <i class="bi bi-trash"></i> Xóa
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="() => AddUserToPermission()">Thêm người dùng</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseUsersDialog">Đóng</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showAddUserDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thêm người dùng vào quyền: @selectedPermission?.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddUserDialog"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="userPermissionModel" OnValidSubmit="SaveUserPermission">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="mb-3">
                            <label for="userId" class="form-label">Người dùng</label>
                            <InputSelect id="userId" class="form-select" @bind-Value="userPermissionModel.UserId">
                                <option value="">-- Chọn người dùng --</option>
                                @foreach (var user in availableUsers)
                                {
                                    <option value="@user.Id">@user.FullName (@user.Email)</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => userPermissionModel.UserId)" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label d-block">Phạm vi quyền</label>
                            <div class="form-check">
                                <InputRadioGroup @bind-Value="userPermissionModel.Scope">
                                    <div class="form-check">
                                        <InputRadio class="form-check-input" Value="@("All")" id="scopeAll" />
                                        <label class="form-check-label" for="scopeAll">Toàn bộ</label>
                                    </div>
                                    
                                    <div class="form-check mt-2">
                                        <InputRadio class="form-check-input" Value="@("Department")" id="scopeDepartment" />
                                        <label class="form-check-label" for="scopeDepartment">Phòng ban cụ thể</label>
                                    </div>
                                    
                                    @if (userPermissionModel.Scope == "Department")
                                    {
                                        <div class="ms-4 mt-2">
                                            <InputSelect class="form-select" @bind-Value="userPermissionModel.ScopeDepartmentId">
                                                <option value="">-- Chọn phòng ban --</option>
                                                @foreach (var dept in departments ?? Enumerable.Empty<Department>())
                                                {
                                                    <option value="@dept.Id">@dept.Name</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => userPermissionModel.ScopeDepartmentId)" />
                                        </div>
                                    }
                                    
                                    <div class="form-check mt-2">
                                        <InputRadio class="form-check-input" Value="@("Self")" id="scopeSelf" />
                                        <label class="form-check-label" for="scopeSelf">Chỉ bản thân</label>
                                    </div>
                                </InputRadioGroup>
                            </div>
                        </div>
                        
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseAddUserDialog">Hủy</button>
                            <button type="submit" class="btn btn-primary">Thêm</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<div class="card mt-4 mb-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">Công cụ kiểm tra dữ liệu phân quyền</h5>
    </div>
    <div class="card-body">
        <div class="form-check form-switch mb-3">
            <input class="form-check-input" type="checkbox" @bind="showDebugInfo" id="debugSwitch">
            <label class="form-check-label" for="debugSwitch">Hiển thị thông tin debug</label>
        </div>
        
        @if (showDebugInfo)
        {
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Dữ liệu quyền (@(permissions?.Count ?? 0) bản ghi)</h6>
                        </div>
                        <div class="card-body">
                            <pre style="max-height: 300px; overflow: auto;">@(System.Text.Json.JsonSerializer.Serialize(permissions, new System.Text.Json.JsonSerializerOptions { WriteIndented = true }))</pre>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Dữ liệu người dùng của quyền (@(permissionUsers?.Count ?? 0) bản ghi)</h6>
                        </div>
                        <div class="card-body">
                            <pre style="max-height: 300px; overflow: auto;">@(System.Text.Json.JsonSerializer.Serialize(permissionUsers, new System.Text.Json.JsonSerializerOptions { WriteIndented = true }))</pre>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row mt-3">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">Kiểm tra API</h6>
                            <button class="btn btn-primary btn-sm" @onclick="RefreshAllData">Làm mới dữ liệu</button>
                        </div>
                        <div class="card-body">
                            <div class="input-group mb-3">
                                <input type="text" class="form-control" placeholder="Endpoint cần kiểm tra (ví dụ: api/permissions)" @bind="testApiEndpoint">
                                <button class="btn btn-outline-secondary" type="button" @onclick="TestApiEndpoint">Kiểm tra</button>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(testApiResult))
                            {
                                <div class="alert @(testApiSuccess ? "alert-success" : "alert-danger")">
                                    <pre style="max-height: 200px; overflow: auto;">@testApiResult</pre>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card mt-3">
                <div class="card-header">
                    <h6 class="mb-0">Thông tin lọc & phân trang</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <p><strong>Tìm kiếm:</strong> @searchTerm</p>
                            <p><strong>Loại quyền:</strong> @selectedType</p>
                            <p><strong>Trạng thái:</strong> @statusFilter</p>
                        </div>
                        <div class="col-md-4">
                            <p><strong>Trang hiện tại:</strong> @currentPage</p>
                            <p><strong>Kích thước trang:</strong> @pageSize</p>
                            <p><strong>Tổng số trang:</strong> @totalPages</p>
                        </div>
                        <div class="col-md-4">
                            <p><strong>Tổng số quyền:</strong> @(permissions?.Count ?? 0)</p>
                            <p><strong>Số quyền đã lọc:</strong> @filteredPermissions.Count()</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Permission>? permissions;
    private List<Department>? departments;
    private List<UserPermissionDto>? permissionUsers;
    private List<UserDto>? availableUsers;
    
    private Permission? selectedPermission;
    private PermissionModel permissionModel = new();
    private UserPermissionModel userPermissionModel = new();
    
    private bool showDialog;
    private bool showDeleteConfirm;
    private bool showUsersDialog;
    private bool showAddUserDialog;
    private UserPermissionDto? selectedUserPermission;
    
    // Filtering
    private string searchTerm = "";
    private string selectedType = "";
    private string statusFilter = "";
    private IEnumerable<Permission> filteredPermissions => FilterPermissions();
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling(filteredPermissions.Count() / (double)pageSize);
    
    // Debug properties
    private bool showDebugInfo = false;
    private string testApiEndpoint = "api/permissions";
    private string testApiResult = "";
    private bool testApiSuccess = false;
    
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(errorMessage))
            {
                await JSRuntime.InvokeVoidAsync("console.error", errorMessage);
            }
        }
    }
    
    private async Task LoadInitialData()
    {
        isLoading = true;
        errorMessage = "";
        try
        {
            await LoadPermissions();
            await LoadDepartments();
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadPermissions()
    {
        try 
        {
            permissions = await Http.GetFromJsonAsync<List<Permission>>("api/permissions");
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi tải quyền: {ex.Message}";
        }
    }
    
    private async Task LoadDepartments()
    {
        try
        {
            var response = await Http.GetAsync("api/department");
            
            if (response.IsSuccessStatusCode)
            {
                departments = await response.Content.ReadFromJsonAsync<List<Department>>();
            }
            else
            {
                // Không hiển thị lỗi tải phòng ban lên giao diện
                departments = new List<Department>();
                Console.WriteLine($"Không thể tải danh sách phòng ban. Mã lỗi: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Đặt departments = danh sách trống để tránh lỗi hiển thị
            departments = new List<Department>();
            Console.WriteLine($"Lỗi tải phòng ban: {ex.Message}");
        }
    }
    
    private async Task LoadAvailableUsers()
    {
        try
        {
            if (selectedPermission != null)
            {
                availableUsers = await Http.GetFromJsonAsync<List<UserDto>>("api/users");
                
                // Filter out users who already have this permission
                if (permissionUsers != null && availableUsers != null)
                {
                    var existingUserIds = permissionUsers.Select(pu => pu.User.Id).ToList();
                    availableUsers = availableUsers.Where(u => !existingUserIds.Contains(u.Id)).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi tải danh sách người dùng: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private void ShowPermissionDialog(Permission? permission)
    {
        selectedPermission = permission;
        
        if (permission == null)
        {
            // Creating new permission
            permissionModel = new PermissionModel
            {
                IsActive = true,
                PermissionType = PermissionType.View
            };
        }
        else
        {
            // Editing existing permission
            permissionModel = new PermissionModel
            {
                Name = permission.Name,
                Code = permission.Code,
                Description = permission.Description,
                IsActive = permission.IsActive,
                PermissionType = PermissionType.View
            };
        }
        
        showDialog = true;
    }
    
    private void CloseDialog()
    {
        showDialog = false;
        selectedPermission = null;
    }
    
    private async Task SavePermission()
    {
        try
        {
            if (selectedPermission == null)
            {
                // Create new permission
                var newPermission = new Permission
                {
                    Name = permissionModel.Name,
                    Code = permissionModel.Code,
                    Description = permissionModel.Description,
                    IsActive = permissionModel.IsActive
                };
                
                await Http.PostAsJsonAsync("api/permissions", newPermission);
                errorMessage = "Quyền đã được tạo thành công!";
            }
            else
            {
                // Update existing permission
                selectedPermission.Name = permissionModel.Name;
                selectedPermission.Code = permissionModel.Code;
                selectedPermission.Description = permissionModel.Description;
                selectedPermission.IsActive = permissionModel.IsActive;
                
                await Http.PutAsJsonAsync($"api/permissions/{selectedPermission.Id}", selectedPermission);
                errorMessage = "Cập nhật quyền thành công!";
            }
            
            CloseDialog();
            await LoadPermissions();
            
            // Chỉ gọi JavaScript sau khi render
            await Task.Delay(100); // Đợi một chút để component render
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private void ConfirmDelete(Permission permission)
    {
        selectedPermission = permission;
        showDeleteConfirm = true;
    }
    
    private void CloseDeleteConfirm()
    {
        showDeleteConfirm = false;
        selectedPermission = null;
    }
    
    private async Task DeletePermission()
    {
        if (selectedPermission != null)
        {
            try
            {
                await Http.DeleteAsync($"api/permissions/{selectedPermission.Id}");
                errorMessage = "Quyền đã được xóa thành công!";
                CloseDeleteConfirm();
                await LoadPermissions();
                
                // Chỉ gọi JavaScript sau khi render
                await Task.Delay(100); // Đợi một chút để component render
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
                errorMessage = string.Empty;
            }
            catch (Exception ex)
            {
                errorMessage = $"Lỗi khi xóa quyền: {ex.Message}";
                StateHasChanged();
            }
        }
    }
    
    private async Task ViewPermissionUsers(int permissionId)
    {
        selectedPermission = permissions?.FirstOrDefault(p => p.Id == permissionId);
        
        if (selectedPermission != null)
        {
            try
            {
                isLoading = true;
                errorMessage = "";
                StateHasChanged();
                
                permissionUsers = await Http.GetFromJsonAsync<List<UserPermissionDto>>($"api/permissions/{permissionId}/users");
                showUsersDialog = true;
            }
            catch (Exception ex)
            {
                errorMessage = $"Lỗi khi tải danh sách người dùng: {ex.Message}";
                StateHasChanged();
            }
            finally
            {
                isLoading = false;
            }
        }
    }
    
    private void CloseUsersDialog()
    {
        showUsersDialog = false;
        permissionUsers = null;
    }
    
    private async Task AddUserToPermission()
    {
        await ShowAddUserDialog();
    }
    
    private void CloseAddUserDialog()
    {
        showAddUserDialog = false;
    }
    
    private async Task SaveUserPermission()
    {
        try
        {
            if (selectedPermission != null && !string.IsNullOrEmpty(userPermissionModel.UserId))
            {
                var newUserPermission = new
                {
                    UserId = userPermissionModel.UserId,
                    Scope = userPermissionModel.Scope
                };
                
                await Http.PostAsJsonAsync($"api/permissions/{selectedPermission.Id}/users", newUserPermission);
                errorMessage = "Đã thêm quyền cho người dùng thành công!";
                
                // Close dialog and refresh data
                showAddUserDialog = false;
                permissionUsers = await Http.GetFromJsonAsync<List<UserPermissionDto>>($"api/permissions/{selectedPermission.Id}/users");
                await LoadAvailableUsers();
                
                // Chỉ gọi JavaScript sau khi render
                await Task.Delay(100); // Đợi một chút để component render
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
                errorMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi thêm quyền cho người dùng: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private async Task RemoveUserPermission(UserPermissionDto userPermission)
    {
        try
        {
            if (selectedPermission == null) return;
            
            await Http.DeleteAsync($"api/permissions/{selectedPermission.Id}/users/{userPermission.User.Id}");
            
            errorMessage = "Quyền của người dùng đã được xóa!";
            
            // Chỉ gọi JavaScript sau khi render
            await Task.Delay(100); // Đợi một chút để component render
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            errorMessage = string.Empty;
            
            await ViewPermissionUsers(selectedPermission.Id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi xóa quyền người dùng: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private void NavigateToUserPermissions()
    {
        NavigationManager.NavigateTo("/permissions/users");
    }
    
    private void ChangePage(int page)
    {
        if (page < 1 || page > totalPages)
            return;
            
        currentPage = page;
    }
    
    private void HandleSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            Search();
    }
    
    private void Search()
    {
        currentPage = 1;
    }
    
    private IEnumerable<Permission> FilterPermissions()
    {
        if (permissions == null)
            return Enumerable.Empty<Permission>();
            
        var filtered = permissions.AsEnumerable();
        
        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.Trim().ToLower();
            filtered = filtered.Where(p => 
                (p.Name?.ToLower()?.Contains(term) ?? false) || 
                (p.Code?.ToLower()?.Contains(term) ?? false) ||
                (p.Description != null && p.Description.ToLower().Contains(term))
            );
        }
        
        // Apply type filter - bỏ qua vì không có trường Type trong Permission
        if (!string.IsNullOrEmpty(selectedType))
        {
            // Không lọc thực tế vì đã bỏ type trong model
            filtered = filtered.Where(p => true);
        }
        
        // Apply status filter
        if (!string.IsNullOrEmpty(statusFilter))
        {
            bool isActive = statusFilter.Equals("true", StringComparison.OrdinalIgnoreCase);
            filtered = filtered.Where(p => p.IsActive == isActive);
        }
        
        // Apply pagination
        var paged = filtered
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize);
            
        return paged;
    }
    
    private string GetDepartmentName(int departmentId)
    {
        if (departments == null)
            return "N/A";
            
        var department = departments.FirstOrDefault(d => d.Id == departmentId);
        return department?.Name ?? "N/A";
    }
    
    private string GetTypeColor(PermissionType type)
    {
        return type switch
        {
            PermissionType.View => "info",
            PermissionType.Create => "success",
            PermissionType.Edit => "warning",
            PermissionType.Delete => "danger",
            PermissionType.Admin => "dark",
            _ => "light"
        };
    }
    
    private string GetTypeDisplayName(PermissionType type)
    {
        return type switch
        {
            PermissionType.View => "Xem",
            PermissionType.Create => "Tạo mới",
            PermissionType.Edit => "Chỉnh sửa",
            PermissionType.Delete => "Xóa",
            PermissionType.Admin => "Quản trị",
            _ => type.ToString()
        };
    }
    
    public class PermissionModel
    {
        public int Id { get; set; }
        
        [Required(ErrorMessage = "Tên quyền là bắt buộc")]
        [MaxLength(100, ErrorMessage = "Tên quyền không được vượt quá 100 ký tự")]
        public string Name { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Mã quyền là bắt buộc")]
        [MaxLength(100, ErrorMessage = "Mã quyền không được vượt quá 100 ký tự")]
        public string Code { get; set; } = string.Empty;
        
        [MaxLength(200, ErrorMessage = "Mô tả không được vượt quá 200 ký tự")]
        public string? Description { get; set; }
        
        public bool IsActive { get; set; } = true;
        
        public PermissionType PermissionType { get; set; } = PermissionType.View;
    }
    
    public class UserPermissionDto
    {
        public UserDto User { get; set; } = new();
        public int PermissionId { get; set; }
        public PermissionType Type { get; set; }
        public int? ScopeDepartmentId { get; set; }
        public bool IsSelfOnly { get; set; }
    }
    
    public class UserDto
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
    }
    
    public class UserPermissionModel
    {
        [Required(ErrorMessage = "Vui lòng chọn người dùng")]
        public string UserId { get; set; } = string.Empty;
        
        public string Scope { get; set; } = "All";
        
        [Range(1, int.MaxValue, ErrorMessage = "Vui lòng chọn phòng ban")]
        public int? ScopeDepartmentId { get; set; }
    }
    
    public enum PermissionType
    {
        View,
        Create, 
        Edit,
        Delete,
        Admin
    }
    
    private async Task TestApiEndpoint()
    {
        try
        {
            testApiResult = "Đang tải...";
            testApiSuccess = true;
            StateHasChanged();
            
            var response = await Http.GetAsync(testApiEndpoint);
            
            if (response.IsSuccessStatusCode)
            {
                testApiSuccess = true;
                var content = await response.Content.ReadAsStringAsync();
                // Prettify JSON if it's valid
                try 
                {
                    var jsonObj = System.Text.Json.JsonDocument.Parse(content);
                    content = System.Text.Json.JsonSerializer.Serialize(
                        jsonObj, 
                        new System.Text.Json.JsonSerializerOptions { WriteIndented = true }
                    );
                }
                catch (Exception jsonEx)
                {
                    errorMessage = $"Lỗi khi phân tích JSON: {jsonEx.Message}";
                    StateHasChanged();
                }
                
                testApiResult = content;
            }
            else
            {
                testApiSuccess = false;
                testApiResult = $"Lỗi: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            testApiSuccess = false;
            testApiResult = $"Lỗi: {ex.Message}";
            errorMessage = $"Lỗi kiểm tra API: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private async Task RefreshAllData()
    {
        try
        {
            await LoadInitialData();
            errorMessage = "Đã làm mới dữ liệu thành công!";
            
            // Chỉ gọi JavaScript sau khi render
            await Task.Delay(100); // Đợi một chút để component render
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi làm mới dữ liệu: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ShowAddUserDialog()
    {
        if (selectedPermission != null)
        {
            try
            {
                isLoading = true;
                errorMessage = "";
                StateHasChanged();
                
                await LoadAvailableUsers();
                userPermissionModel = new UserPermissionModel();
                showAddUserDialog = true;
            }
            catch (Exception ex)
            {
                errorMessage = $"Lỗi khi tải người dùng: {ex.Message}";
                StateHasChanged();
            }
            finally
            {
                isLoading = false;
            }
        }
    }

    public class Department
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public List<UserDto> Users { get; set; } = new List<UserDto>();
    }
    
    public class Permission
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Code { get; set; } = string.Empty;
        public string? Description { get; set; }
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
    }
} 